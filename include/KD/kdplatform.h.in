/******************************************************************************
 * libKD
 * zlib/libpng License
 ******************************************************************************
 * Copyright (c) 2014-2015 Kevin Schmidt
 * 
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 ******************************************************************************/

#ifndef __kdplatform_h_
#define __kdplatform_h_

#define MESA_EGL_NO_X11_HEADERS

#if defined (KD_EXPORTS)
    #define KHRONOS_DLL_EXPORTS
#endif

#include <KHR/khrplatform.h>

/******************************************************************************
 * Implementation defined
 ******************************************************************************/

#cmakedefine KD_THREAD_C11
#cmakedefine KD_THREAD_POSIX
#cmakedefine KD_THREAD_WIN32
#cmakedefine KD_ATOMIC_C11
#cmakedefine KD_ATOMIC_WIN32
#cmakedefine KD_ATOMIC_BUILTIN
#cmakedefine KD_ATOMIC_LEGACY
#cmakedefine KD_VFS_SUPPORTED
#cmakedefine KD_WINDOW_X11
#cmakedefine KD_WINDOW_WIN32
#cmakedefine KD_WINDOW_ANDROID
#cmakedefine KD_WINDOW_WAYLAND
#cmakedefine KD_FREESTANDING

#if defined(__GNUC__) || defined(__clang__)
    #define KD_THREADLOCAL __thread
#elif defined(_MSC_VER)
    #define KD_THREADLOCAL __declspec(thread)
#elif defined(KD_THREAD_C11)
    #define KD_THREADLOCAL _Thread_local
#else
    #error "Platform not supported yet."
#endif

#if defined(__GNUC__) || defined(__clang__)
    #define KD_UNUSED __attribute__((__unused__))
#elif defined(_MSC_VER)
    #define KD_UNUSED __pragma(warning(suppress: 4100 4101))
#else
    #define KD_UNUSED
#endif

/******************************************************************************
 * Specification defined
 ******************************************************************************/
#cmakedefine KD_WINDOW_SUPPORTED
#cmakedefine KD_NO_STATIC_DATA

#define KD_APIENTRY KHRONOS_APIENTRY
#define KD_API KHRONOS_APICALL

#if __STDC_VERSION__ >= 201112L
    #define KD_NORETURN _Noreturn
#else
    #if defined(__GNUC__) || defined(__clang__)
        #define KD_NORETURN __attribute__((__noreturn__))
    #elif defined(_MSC_VER)
        #define KD_NORETURN __declspec(noreturn)
    #else
        #define KD_NORETURN 
    #endif
#endif

#ifdef NDEBUG
    #define KD_NDEBUG
#endif

#include <assert.h>
#define kdAssert(c) assert(c)

typedef khronos_int32_t     KDint32;
typedef khronos_uint32_t    KDuint32;
typedef khronos_int64_t     KDint64;
typedef khronos_uint64_t    KDuint64;
typedef khronos_int16_t     KDint16;
typedef khronos_uint16_t    KDuint16;
typedef khronos_uintptr_t   KDuintptr;
typedef khronos_usize_t     KDsize;
typedef khronos_ssize_t     KDssize;

#define KDINT_MIN       (-0x7fffffff-1)
#define KDINT_MAX       0x7fffffff
#define KDUINT_MAX      0xffffffffU
#define KDINT64_MIN     (-0x8000000000000000-1)
#define KDINT64_MAX     0x7fffffffffffffff
#define KDUINT64_MAX    0xffffffffffffffffU
#define KDSSIZE_MIN     KDINT64_MIN
#define KDSSIZE_MAX     KDINT64_MAX
#define KDSIZE_MAX      KDUINT_MAX
#define KDUINTPTR_MAX   KDUINT_MAX
#define KD_INFINITY     0x7f800000

#endif /* __kdplatform_h_ */

