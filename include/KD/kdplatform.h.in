/******************************************************************************
 * libKD
 * zlib/libpng License
 ******************************************************************************
 * Copyright (c) 2014-2017 Kevin Schmidt
 * 
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 ******************************************************************************/

#ifndef __kdplatform_h_
#define __kdplatform_h_

#define MESA_EGL_NO_X11_HEADERS

/******************************************************************************
 * Implementation defined
 ******************************************************************************/

#cmakedefine KD_WINDOW_X11
#cmakedefine KD_WINDOW_WAYLAND
#cmakedefine KD_WINDOW_WIN32
#cmakedefine KD_WINDOW_ANDROID
#cmakedefine KD_WINDOW_NULL
#cmakedefine KD_FREESTANDING

#if defined(KD_WINDOW_X11)
#   define MESA_EGL_NO_X11_HEADERS
#endif

#if defined(__GNUC__) || defined(__clang__) || defined(__TINYC__)
#   define KD_UNUSED __attribute__((__unused__))
#elif defined(_MSC_VER)
#   define KD_UNUSED __pragma(warning(suppress: 4100 4101))
#else
#   define KD_UNUSED
#endif

#if defined(__GNUC__) || defined(__clang__)
#   define KD_DEPRECATED __attribute__((__deprecated__))
#elif defined(_MSC_VER)
#   define KD_DEPRECATED __declspec(deprecated)
#else
#   define KD_DEPRECATED
#endif

#if defined(_WIN32)
#   define KD_ATOMIC_WIN32
#   define KD_THREAD_WIN32
#elif defined(__INTEL_COMPILER)
#   if defined(__GNUC__)
#       define KD_ATOMIC_SYNC
#       define KD_THREAD_POSIX
#   else
#       define KD_ATOMIC_WIN32
#       define KD_THREAD_WIN32
#   endif
#elif defined(__clang__)
#   if (__clang_major__ > 3)
#       if __has_include(<stdatomic.h>)
#           define KD_ATOMIC_C11
#       else
#           define KD_ATOMIC_BUILTIN
#       endif
#   elif (__clang_major__ == 3) && (__clang_minor__ >= 1)
#       define KD_ATOMIC_BUILTIN
#   else
#       define KD_ATOMIC_SYNC
#   endif
#   if __has_include(<threads.h>)
#       define KD_THREAD_C11
#   elif __has_include(<pthread.h>)
#       define KD_THREAD_POSIX
#   endif
#elif defined(__GNUC__)
#   if (__GNUC__ > 4)
#       if __has_include(<stdatomic.h>)
#           define KD_ATOMIC_C11
#       else
#           define KD_ATOMIC_BUILTIN
#       endif
#   elif (__GNUC__ == 4) && (__GNUC_MINOR__ >= 7)
#       define KD_ATOMIC_BUILTIN
#   elif (__GNUC__ == 4) && (__GNUC_MINOR__ >= 1)
#       define KD_ATOMIC_SYNC
#   else
#       define KD_ATOMIC_MUTEX
#   endif
#   if (__GNUC__ > 4)
#       if __has_include(<threads.h>)
#           define KD_THREAD_C11
#       elif __has_include(<pthread.h>)
#           define KD_THREAD_POSIX
#       endif
#   else
#       define KD_THREAD_POSIX
#   endif
#elif defined(__TINYC__)
#   define KD_ATOMIC_MUTEX
#   define KD_THREAD_POSIX
#else
#   define KD_ATOMIC_MUTEX
#endif

/******************************************************************************
 * Specification defined
 ******************************************************************************/
#cmakedefine KD_WINDOW_SUPPORTED
#cmakedefine KD_NO_STATIC_DATA

#if defined(_MSC_VER) || defined(__MINGW32__)
    #define KD_APIENTRY __stdcall
#else
    #define KD_APIENTRY
#endif

#if defined(_MSC_VER) || defined(__MINGW32__)
    #if defined(KD_EXPORTS)
        #define KD_API __declspec(dllexport)
    #else
        #define KD_API __declspec(dllimport)
    #endif
#elif defined(__GNUC__) || defined(__clang__)
    #if defined(KD_EXPORTS)
        #define KD_API __attribute__((__visibility__("default")))
    #else
        #define KD_API __attribute__((__visibility__("hidden")))
    #endif
#else
    #define KD_API
#endif

#if __STDC_VERSION__ >= 201112L
    #define KD_NORETURN _Noreturn
#else
    #if defined(_MSC_VER) || defined(__MINGW32__)
        #define KD_NORETURN __declspec(noreturn)
    #elif defined(__GNUC__) || defined(__clang__)
        #define KD_NORETURN __attribute__((__noreturn__))
    #else
        #define KD_NORETURN 
    #endif
#endif

#ifdef NDEBUG
    #define KD_NDEBUG
#endif

#ifdef KD_NDEBUG
    #define kdAssert(c) ((void) 0)
#else
    #define kdAssert(c) ((c) ? (void) 0 : kdHandleAssertion(#c, __FILE__, __LINE__))
#endif

#if defined(_MSC_VER)
    typedef __int16                 KDint16;
    typedef unsigned __int16        KDuint16;
    typedef __int32                 KDint32;
    typedef unsigned __int32        KDuint32;
    typedef __int64                 KDint64;
    typedef unsigned __int64        KDuint64;
#else
    typedef short                   KDint16;
    typedef unsigned short          KDuint16;
    typedef int                     KDint32;
    typedef unsigned int            KDuint32;
    typedef signed   long long      KDint64;
    typedef unsigned long long      KDuint64;
#endif

#if defined(_WIN64)
    typedef unsigned long long      KDuintptr;
    typedef signed   long long      KDssize;
    typedef unsigned long long      KDsize;
#else
    typedef unsigned long           KDuintptr;
    typedef signed   long           KDssize;
    typedef unsigned long           KDsize;
#endif

#define KDINT_MIN       (-0x7fffffff-1)
#define KDINT_MAX       0x7fffffff
#define KDUINT_MAX      0xffffffffU
#define KDINT64_MIN     (-0x8000000000000000-1)
#define KDINT64_MAX     0x7fffffffffffffff
#define KDUINT64_MAX    0xffffffffffffffffU
#define KDSSIZE_MIN     KDINT64_MIN
#define KDSSIZE_MAX     KDINT64_MAX
#define KDSIZE_MAX      KDUINT_MAX
#define KDUINTPTR_MAX   KDUINT_MAX
#define KD_INFINITY     0x7f800000


/******************************************************************************
 * Extensions
 ******************************************************************************/

#if defined(__GNUC__) || defined(__clang__)
#   define KD_VA_START_KHR(ap, arg)    __builtin_va_start(ap, arg)
#   define KD_VA_END_KHR(ap)           __builtin_va_end(ap)
#   define KD_VA_ARG_INT32_KHR(ap)     __builtin_va_arg(ap, KDint32)
#   define KD_VA_ARG_INT_KHR(ap)       __builtin_va_arg(ap, KDint)
#   define KD_VA_ARG_INT64_KHR(ap)     __builtin_va_arg(ap, KDint64)
#   define KD_VA_ARG_FLOAT32_KHR(ap)   __builtin_va_arg(ap, KDfloat32)
#   define KD_VA_ARG_FLOAT64_KHR(ap)   __builtin_va_arg(ap, KDfloat64)
#   define KD_VA_ARG_PTR_KHR(ap)       __builtin_va_arg(ap, KDuintptr)
#   define KD_VA_COPY_VEN(d, s)        __builtin_va_copy(d, s)
#else
#   include <stdarg.h>
#   define KD_VA_START_KHR(ap, arg)    va_start(ap, arg)
#   define KD_VA_END_KHR(ap)           va_end(ap)
#   define KD_VA_ARG_INT32_KHR(ap)     va_arg(ap, KDint32)
#   define KD_VA_ARG_INT_KHR(ap)       va_arg(ap, KDint)
#   define KD_VA_ARG_INT64_KHR(ap)     va_arg(ap, KDint64)
#   define KD_VA_ARG_FLOAT32_KHR(ap)   va_arg(ap, KDfloat32)
#   define KD_VA_ARG_FLOAT64_KHR(ap)   va_arg(ap, KDfloat64)
#   define KD_VA_ARG_PTR_KHR(ap)       va_arg(ap, KDuintptr)
#   define KD_VA_COPY_VEN(d, s)        va_copy(d, s)
#endif

#endif /* __kdplatform_h_ */

